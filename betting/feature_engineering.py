# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_feature_engineering.ipynb (unless otherwise specified).

__all__ = ['read_football_csv', 'extract_teams', 'add_gamedays', 'add_points', 'add_positions', 'add_simple_diffs',
           'results_from_goals', 'create_profit_df', 'add_profit_cols']

# Cell
from pathlib import Path
import pandas as pd

# Cell
def read_football_csv(path):
    df = pd.read_csv(path, encoding='latin1')
    try:
        df.Date = pd.to_datetime(df.Date, format='%d/%m/%y')
    except:
        df.Date = pd.to_datetime(df.Date, format='%d/%m/%Y')
    df = df.sort_values('Date')

    return df

# Cell
def extract_teams(df, home_team='HomeTeam', away_team='AwayTeam'):
    home_teams = df[home_team].unique()
    away_teams = df[away_team].unique()
    assert set(home_teams)==set(away_teams), f"home/away team list is different:{set(home_teams)^set(away_teams)}"

    n_games = len(df)
    n_teams = len(home_teams)
    expected_n_games = n_teams*(n_teams-1)
    assert n_games==expected_n_games, f"Number of games {n_games} does not match number of teams ({n_teams}, {expected_n_games}"

    return list(home_teams)

# Cell
def add_gamedays(df, home_team='HomeTeam', away_team='AwayTeam'):
    teams = extract_teams(df, home_team=home_team, away_team=away_team)

    n_teams = len(teams)
    n_gamedays = len(df)*2//n_teams
    games_per_day = n_teams//2

    gamedays = sum(([i]*games_per_day for i in range(n_gamedays)), start=[])
    assert len(gamedays)==len(df)

    df['gameday'] = gamedays
    return df
    #for gameday, group in df.groupby('gameday'):
    #    assert set(group.HomeTeam.unique()).union(set(group.AwayTeam.unique()))==set(teams), "Each team should play once during each gameday"

# Cell
def add_points(df, home_team='HomeTeam', away_team='AwayTeam', date='Date'):
    current_points = {team: 0 for team in teams}
    total_home_points = []
    total_away_points = []

    df = df.sort_values(date)

    for _,row in df.iterrows():
        if row.FTR=='H':
            home_points = 3
            away_points = 0
        if row.FTR=='D':
            home_points = 1
            away_points = 1
        if row.FTR=='A':
            home_points = 0
            away_points = 3

        total_home_points.append(current_points[row[home_team]])
        total_away_points.append(current_points[row[away_team]])

        current_points[row.HomeTeam] += home_points
        current_points[row.AwayTeam] += away_points

    assert len(total_home_points)==len(total_away_points)==len(df)

    df['home_points'] = total_home_points
    df['away_points'] = total_away_points

    return df

# Cell
def _positions_from_sorted_points(sorted_teams):
    current_position = 0
    current_points = 1000
    gameday_positions = {}

    for team,points in sorted_teams:
        if points<current_points:
            current_position += 1
        gameday_positions[team] = current_position
        current_points = points
    return gameday_positions

def add_positions(df):
    teams = extract_teams(df)
    all_positions = {}

    for gameday,group in df.groupby('gameday'):
        gameday_positions = {}
        points = []
        for _,row in group.iterrows():
            points.append([row['HomeTeam'], row['home_points']])
            points.append([row['AwayTeam'], row['away_points']])

        sorted_teams = sorted(points, key=lambda el: el[1], reverse=True)
        gameday_positions = _positions_from_sorted_points(sorted_teams)
        all_positions[gameday] = gameday_positions

    df['home_position'] = df.apply(lambda row: all_positions[row.gameday][row.HomeTeam], axis=1)
    df['away_position'] = df.apply(lambda row: all_positions[row.gameday][row.AwayTeam], axis=1)

    return df

# Cell
def add_simple_diffs(df):
    df['points_diff'] = df.home_points - df.away_points
    df['position_diff'] = df.home_position - df.away_position
    return df

# Cell
def results_from_goals(df, home_col, away_col):
    """
    Compares goals in home_col to goals in away_col, creates [new_col] with results encoded as:
    -1 -> home win
    0 -> draw
    1 -> away win
    """
    series = pd.Series(0, index=df.index)
    series[df[home_col]>df[away_col]] = -1
    series[df[home_col]<df[away_col]] = 1

    return series

# Cell
def create_profit_df(df, odds_home, odds_draw, odds_away, home_profit='y_home', draw_profit='y_draw', away_profit='y_away', df_result_col='result'):
    y_df = pd.DataFrame(index=df.index, columns=[home_profit, draw_profit, away_profit])

    y_df[home_profit] = -1
    y_df[draw_profit] = -1
    y_df[away_profit] = -1

    y_df.loc[df[df_result_col]==-1, home_profit] += df[odds_home]
    y_df.loc[df[df_result_col]==0, draw_profit] += df[odds_draw]
    y_df.loc[df[df_result_col]==--1, away_profit] += df[odds_away]

    return y_df

def add_profit_cols(df, odds_home, odds_draw, odds_away, home_profit='y_home', draw_profit='y_draw', away_profit='y_away', df_result_col='result'):
    profit_df = create_profit_df(odds_df, 'odds_home', 'odds_draw', 'odds_away')

    return df.merge(profit_df, left_index=True, right_index=True)