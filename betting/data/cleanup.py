# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_data_cleanup.ipynb (unless otherwise specified).

__all__ = ['load_meta', 'add_season_from_date', 'match_teams_from_goals']

# Cell
import pandas as pd
from ..utility import *

# Cell
def load_meta(meta_dir):
    meta_matches = pd.read_feather(meta_dir/'games.feather')
    meta_matchdays = pd.read_feather(meta_dir/'matchdays.feather')

    meta = pd.merge(meta_matches, meta_matchdays, on=['matchday', 'season', 'league'])
    return meta

# Cell
def add_season_from_date(actual_df, meta_df, date_col):
    for season,df in meta_df.groupby('season'):
        start = df.start_date.min()
        end = df.end_date.max()

        actual_df.loc[(start<=actual_df[date_col]) & (actual_df[date_col]<=end), 'season'] = season
    actual_df.season = actual_df.season.astype(int)

    return actual_df

# Cell
def match_teams_from_goals(actuals_df, meta_df, home_team, away_team, home_score, away_score, league, date_col, season_col='season'):
    seasons = actuals_df[season_col].unique()
    actual_names = unique_in_cols(actuals_df, [home_team, away_team])
    n_actuals = len(actual_names)

    translation = {}

    for season in seasons:
        for matchday,df in meta_df.loc[(meta_df.league==league) & (meta_df.season==season)].groupby('matchday'):
            start_date = df.start_date.unique()[0]
            end_date = df.end_date.unique()[0]
            results = [f'{home}:{away}' for home,away  in df.loc[:,['home_goals', 'away_goals']].values]

            for unique_result in unique_elements(results):
                unique_home, unique_away = unique_result.split(':')
                actual_mask = (actuals_df.FTHG==int(unique_home)) & (actuals_df.FTAG==int(unique_away)) & (start_date<=actuals_df[date_col]) & (actuals_df[date_col]<=end_date)
                actual_row = actuals_df.loc[actual_mask]

                meta_mask = (df.home_goals==int(unique_home)) & (df.away_goals==int(unique_away))
                meta_row = df.loc[meta_mask]

                try:
                    translation[actual_row.HomeTeam.iloc[0]] = meta_row.home_team.iloc[0]
                    translation[actual_row.AwayTeam.iloc[0]] = meta_row.away_team.iloc[0]
                except:
                    # put excellent error handling here
                    pass

                if len(translation.keys())==n_actuals: return translation

    # some actuals are missing
    for actual_name in actual_names:
        if not actual_name in translation.keys():
            translation[actual_name] = ''
    return translation